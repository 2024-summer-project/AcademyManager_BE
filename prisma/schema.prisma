generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// TODO: 임시유저 => db schema 에 맞게 변환 해야함.
model User {
  id           Int      @id @default(autoincrement())
  user_id      String   @unique
  academy_id   String?
  email        String   @unique
  birth_date   DateTime
  user_name    String
  password     String
  phone_number String
  role         Role     @default(STUDENT)
  image        String   @default("default.png")

  // Relations
  academy      Academy? @relation(fields: [academy_id], references: [academy_id], name: "UserAcademyRelation")
  chief         Chief_Academy?   @relation("UserChiefRelation")
  registrationList AcademyUserRegistrationList? @relation("AcademyUserRegistrationList_User_Relation")
  lectures      Lecture[] @relation("Teacher_Lecture") //강사-강의 1:N
  registerdLecture LectureParticipant[] //강의-수강생 N:M
}

model Academy {
  id            Int     @id @default(autoincrement())
  academy_id    String? @unique
  academy_key   String  @unique
  academy_name  String
  academy_email String  @unique
  address       String
  phone_number  String
  status        Status  @default(PENDING)

  // Relations
  users User[] @relation("UserAcademyRelation")
  chief Chief_Academy? @relation("AcademyChiefRelation")
  registrationList   AcademyUserRegistrationList[] @relation("AcademyUserRegistrationList_Academy_Relation")
  lectures Lecture[] //학원-강의 1:N
}

model Chief_Academy {
  id            String @id @default(uuid()) // 단일 기본키로 설정
  chief_id      String @unique
  academy_id    String @unique

  // Relations
  user    User    @relation("UserChiefRelation", fields: [chief_id], references: [user_id])
  academy Academy @relation("AcademyChiefRelation", fields: [academy_id], references: [academy_id])

  @@unique([chief_id, academy_id]) // 고유 쌍으로 설정
}

model AcademyUserRegistrationList {
  academy_id String 
  user_id    String @unique
  role       Role   @default(STUDENT)
  status     Status @default(PENDING)

  academy   Academy @relation("AcademyUserRegistrationList_Academy_Relation", fields: [academy_id], references: [academy_id])
  user    User    @relation("AcademyUserRegistrationList_User_Relation", fields: [user_id], references: [user_id])
}

model Lecture {
  id Int @id @default(autoincrement())
  lecture_id String @unique
  lecture_name String
  teacher_id  String
  headcount Int //수강생 수
  academy_id String

  // Relations
  teacher User @relation("Teacher_Lecture", fields: [teacher_id], references: [user_id])
  academy Academy @relation(fields: [academy_id], references: [academy_id])
  participant LectureParticipant[]
}

//강의-강사 N:M테이블
model LectureParticipant {
  id Int @id @default (autoincrement())
  lecture_id String
  user_id String

  // Relations
  lecture Lecture @relation(fields: [lecture_id], references: [lecture_id])
  user User @relation(fields: [user_id], references: [user_id])
  @@unique([lecture_id, user_id])
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  CHIEF
  TEACHER
  PARENT
  STUDENT
  ADMIN
}
